#!/usr/bin/env python2
# coding=UTF-8
from mininet.net import Mininet
from mininet.nodelib import NAT
from mininet.cli import CLI

from utils import Floodlight
from utils.MiscUtils import createRandomDPID
import os


class _AutonomousSystem(object):
    """A value class for an autonomous system as generated by BRITE"""
    botdict = dict()
    external_switch = None
    internal_switch = None
    asid = None
    subnet = (0, 1)
    hasNAT = False

    def __len__(self):
        return len(self.botdict.values())


autsysdict = dict()


def addNatAS(asid, num_nodes):
    for i in range(num_nodes):
        addNode(asid, i + 1, i % 10 == 0)


def addNode(asid, nodeid, isBorderNode):
    assert len(
        autsysdict) < 65000, "Currently the BriteTopology does not support more than 65000 different autonomous systems"
    print "addNode(%s, %s, %s)" % (asid, nodeid, isBorderNode)

    if autsysdict.has_key(asid):
        autsys = autsysdict[asid]
        assert len(
            autsys.botdict) < 255, "Currently the BriteTopology does not support more than 254 hosts per autonomous system"
    else:
        autsys = _initialiseAS(asid, _decideIfAShasNAT(asid))
        autsysdict[asid] = autsys

    if isBorderNode and autsys.hasNAT:
        nodename = 'b%s%d' % (asid[:4], nodeid)
        host = net.addHost(nodename, cls=NAT, subnet='10.%d.%d.0/24' % autsys.subnet,
                           inetIntf="%sexternal" % nodename, localIntf="%sinternal" % nodename)
        net.addLink(autsys.external_switch, host)
        print "net.addLink(%s, %s)" % (autsys.external_switch.name, host.name)
    elif autsys.hasNAT:
        nodename = 'n%s%d' % (asid[:4], nodeid)
        host = net.addHost(nodename, ip=_computeNextIP(autsys.subnet, len(autsys.botdict)) + '/24')
    else:
        nodename = 'n%s%d' % (asid[:4], nodeid)
        host = net.addHost(nodename)

    print "net.addHost(%s)" % nodename
    net.addLink(host, autsys.internal_switch,
                params1={'ip': '%s/24' % _computeNextIP(autsys.subnet, len(autsys.botdict))}
                )
    print "net.addLink(%s, %s)" % (host.name, autsys.internal_switch.name)
    autsys.botdict[nodeid] = host


def _initialiseAS(asid, hasNAT):
    assert isinstance(asid, str)
    assert isinstance(hasNAT, bool)

    autsys = _AutonomousSystem()
    autsys.hasNAT = hasNAT
    autsys.internal_switch = net.addSwitch(_computeInternalSwitchName(asid), dpid=createRandomDPID())
    print "net.addSwitch(%s)" % _computeExternalSwitchName(asid)
    autsys.asid = asid
    autsys.subnet = _computeNextSubnet()

    if hasNAT:
        autsys.external_switch = net.addSwitch(_computeExternalSwitchName(asid), dpid=createRandomDPID())
        print "net.addSwitch(%s)" % _computeInternalSwitchName(asid)
    else:
        autsys.external_switch = autsys.internal_switch

    return autsys


def _decideIfAShasNAT(asid):
    return "bot" not in asid

def _computeNextIP(subnet, host):
    assert 0 <= host <= 254, "Invalid host number: %s" % host
    assert isinstance(subnet, tuple), "Subnet is not a tuple but a %s" % type(subnet)
    return "10.%d.%d.%d" % (subnet[0], subnet[1], host + 1)


def _computeInternalSwitchName(asid):
    return "i%s" % asid


def _computeExternalSwitchName(asid):
    return "e%s" % asid


def _computeNextSubnet():
    return int(len(autsysdict) / 254), int(len(autsysdict) % 254 + 1)


if __name__ == '__main__':
    os.system("fuser -k -n tcp 6633")
    os.system("mn -c")

    net = Mininet(controller=Floodlight.Controller)
    net.addController("controller1")

    addNatAS("cnc", 4)
    addNatAS("proxy", 3)
    addNatAS("bot", 4)
    addNatAS("bot2", 4)

    last = None
    for autsys in autsysdict.values():
        if last:
            net.addLink(autsys.external_switch, last.external_switch)
            print "net.addLink(%s, %s)" % (autsys.external_switch, last.external_switch)
        last = autsys

    net.start()
    net.pingAll()
    CLI(net)
    net.stop()
