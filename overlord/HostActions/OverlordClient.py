#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol

try:
    from thrift.protocol import fastbinary
except:
    fastbinary = None


class Iface:
    def startRunnable(self, importmodule, command, kwargs):
        """
        Starts the given runnable with the given params
        :param kwargs: The keyword arguments to be passed to the runnable as a json-encoded dictionary
        :throws OverlordException: Thrown if the runnable could not be started.

        Parameters:
         - importmodule
         - command
         - kwargs
        """
        pass

    def stopRunnable(self, command):
        """
        Starts the given runnable. Does nothing if that runnable does not exist or is not running.
        :throws OverlordException: Thrown if the runnable could not be started.

        Parameters:
         - command
        """
        pass

    def getID(self):
        """
        returns the host id
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def startRunnable(self, importmodule, command, kwargs):
        """
        Starts the given runnable with the given params
        :param kwargs: The keyword arguments to be passed to the runnable as a json-encoded dictionary
        :throws OverlordException: Thrown if the runnable could not be started.

        Parameters:
         - importmodule
         - command
         - kwargs
        """
        self.send_startRunnable(importmodule, command, kwargs)
        self.recv_startRunnable()

    def send_startRunnable(self, importmodule, command, kwargs):
        self._oprot.writeMessageBegin('startRunnable', TMessageType.CALL, self._seqid)
        args = startRunnable_args()
        args.importmodule = importmodule
        args.command = command
        args.kwargs = kwargs
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_startRunnable(self):
        (fname, mtype, rseqid) = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            raise x
        result = startRunnable_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.oops is not None:
            raise result.oops
        return

    def stopRunnable(self, command):
        """
        Starts the given runnable. Does nothing if that runnable does not exist or is not running.
        :throws OverlordException: Thrown if the runnable could not be started.

        Parameters:
         - command
        """
        self.send_stopRunnable(command)
        self.recv_stopRunnable()

    def send_stopRunnable(self, command):
        self._oprot.writeMessageBegin('stopRunnable', TMessageType.CALL, self._seqid)
        args = stopRunnable_args()
        args.command = command
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_stopRunnable(self):
        (fname, mtype, rseqid) = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            raise x
        result = stopRunnable_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.oops is not None:
            raise result.oops
        return

    def getID(self):
        """
        returns the host id
        """
        self.send_getID()
        return self.recv_getID()

    def send_getID(self):
        self._oprot.writeMessageBegin('getID', TMessageType.CALL, self._seqid)
        args = getID_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getID(self):
        (fname, mtype, rseqid) = self._iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(self._iprot)
            self._iprot.readMessageEnd()
            raise x
        result = getID_result()
        result.read(self._iprot)
        self._iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getID failed: unknown result");


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["startRunnable"] = Processor.process_startRunnable
        self._processMap["stopRunnable"] = Processor.process_stopRunnable
        self._processMap["getID"] = Processor.process_getID

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s'%(name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_startRunnable(self, seqid, iprot, oprot):
        args = startRunnable_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = startRunnable_result()
        try:
            self._handler.startRunnable(args.importmodule, args.command, args.kwargs)
        except OverlordException, oops:
            result.oops = oops
        oprot.writeMessageBegin("startRunnable", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_stopRunnable(self, seqid, iprot, oprot):
        args = stopRunnable_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = stopRunnable_result()
        try:
            self._handler.stopRunnable(args.command)
        except OverlordException, oops:
            result.oops = oops
        oprot.writeMessageBegin("stopRunnable", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getID(self, seqid, iprot, oprot):
        args = getID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getID_result()
        result.success = self._handler.getID()
        oprot.writeMessageBegin("getID", TMessageType.REPLY, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class startRunnable_args:
    """
    Attributes:
     - importmodule
     - command
     - kwargs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'importmodule', None, None,),  # 1
        (2, TType.STRING, 'command', None, None,),  # 2
        (3, TType.STRING, 'kwargs', None, None,),  # 3
    )

    def __init__(self, importmodule=None, command=None, kwargs=None, ):
        self.importmodule = importmodule
        self.command = command
        self.kwargs = kwargs

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans,
                                                                                        TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.importmodule = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.command = iprot.readString();
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.kwargs = iprot.readString();
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('startRunnable_args')
        if self.importmodule is not None:
            oprot.writeFieldBegin('importmodule', TType.STRING, 1)
            oprot.writeString(self.importmodule)
            oprot.writeFieldEnd()
        if self.command is not None:
            oprot.writeFieldBegin('command', TType.STRING, 2)
            oprot.writeString(self.command)
            oprot.writeFieldEnd()
        if self.kwargs is not None:
            oprot.writeFieldBegin('kwargs', TType.STRING, 3)
            oprot.writeString(self.kwargs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r'%(key, value)
             for key, value in self.__dict__.iteritems()]
        return '%s(%s)'%(self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class startRunnable_result:
    """
    Attributes:
     - oops
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'oops', (OverlordException, OverlordException.thrift_spec), None,),  # 1
    )

    def __init__(self, oops=None, ):
        self.oops = oops

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans,
                                                                                        TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.oops = OverlordException()
                    self.oops.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('startRunnable_result')
        if self.oops is not None:
            oprot.writeFieldBegin('oops', TType.STRUCT, 1)
            self.oops.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r'%(key, value)
             for key, value in self.__dict__.iteritems()]
        return '%s(%s)'%(self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class stopRunnable_args:
    """
    Attributes:
     - command
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'command', None, None,),  # 1
    )

    def __init__(self, command=None, ):
        self.command = command

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans,
                                                                                        TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.command = iprot.readString();
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('stopRunnable_args')
        if self.command is not None:
            oprot.writeFieldBegin('command', TType.STRING, 1)
            oprot.writeString(self.command)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r'%(key, value)
             for key, value in self.__dict__.iteritems()]
        return '%s(%s)'%(self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class stopRunnable_result:
    """
    Attributes:
     - oops
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'oops', (OverlordException, OverlordException.thrift_spec), None,),  # 1
    )

    def __init__(self, oops=None, ):
        self.oops = oops

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans,
                                                                                        TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.oops = OverlordException()
                    self.oops.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('stopRunnable_result')
        if self.oops is not None:
            oprot.writeFieldBegin('oops', TType.STRUCT, 1)
            self.oops.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r'%(key, value)
             for key, value in self.__dict__.iteritems()]
        return '%s(%s)'%(self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getID_args:
    thrift_spec = (
    )

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans,
                                                                                        TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getID_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r'%(key, value)
             for key, value in self.__dict__.iteritems()]
        return '%s(%s)'%(self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getID_result:
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None,),  # 0
    )

    def __init__(self, success=None, ):
        self.success = success

    def read(self, iprot):
        if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans,
                                                                                        TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
            fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32();
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
            oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r'%(key, value)
             for key, value in self.__dict__.iteritems()]
        return '%s(%s)'%(self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
